generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String    @id @default(uuid())
  fullName    String
  email       String    @unique
  password    String?
  phoneNumber String?
  image       String?
  address     String?
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt
  cart        Cart?
  review      Review[]

  role     USER_ROLE @default(USER)
  booking  Booking[]
  Comments Comment[]
  Replies  Reply[]

  @@map("users")
}

model Cart {
  id     String @id @default(uuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  serviceId String
  service   Service @relation(fields: [serviceId], references: [id])

  @@map("carts")
}

model Service {
  id              String         @id @default(uuid())
  serviceName     String
  price           Int
  image           String?
  serviceFeatures String?
  serviceDetails  String?
  pricingTerms    String?
  location        String?
  warranty        String?
  categoryId      String
  status          SERVICE_STATUS @default(AVAILABLE)
  cart            Cart[]
  review          Review[]
  category        Category       @relation(fields: [categoryId], references: [id])
  schedule        Schedule[]
  booking         Booking[]

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  Comments  Comment[]

  @@map("services")
}

model Category {
  id        String    @id @default(uuid())
  title     String
  image     String?
  service   Service[]
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  @@map("categories")
}

model Schedule {
  id        String  @id @default(uuid())
  serviceId String
  service   Service @relation(fields: [serviceId], references: [id])

  date      String
  startTime String
  endTime   String
  booking   Booking?
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  @@map("schedules")
}

model Booking {
  id String @id @default(uuid())

  status BOOKING_STATUS @default(PENDING)
  userId String
  user   User           @relation(fields: [userId], references: [id])

  serviceId String
  service   Service @relation(fields: [serviceId], references: [id])

  scheduleId String   @unique
  schedule   Schedule @relation(fields: [scheduleId], references: [id])

  // personalize info
  fullName        String?
  email           String?
  phoneNumber     String?
  additionalNotes String?
  // address
  houseNo         String?
  roadNo          String?
  blockNo         String?
  sectorNo        String?
  area            String?

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  @@map("bookings")
}

model Review {
  id      String  @id @default(uuid())
  review  String?
  ratings Int
  userId  String
  user    User    @relation(fields: [userId], references: [id])

  serviceId String
  service   Service @relation(fields: [serviceId], references: [id])

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  @@map("reviews")
}

model Comment {
  id String @id @default(uuid())

  userId String
  user   User   @relation(fields: [userId], references: [id])

  serviceId String
  service   Service @relation(fields: [serviceId], references: [id])

  comment String
  replies Reply[]

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  @@map("comments")
}

model Reply {
  id String @id @default(uuid())

  userId String
  user   User   @relation(fields: [userId], references: [id])

  commentId String
  comment   Comment @relation(fields: [commentId], references: [id])
  reply     String

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  @@map("replies")
}

enum USER_ROLE {
  USER
  ADMIN
  SUPER_ADMIN
}

enum SERVICE_STATUS {
  AVAILABLE
  DISCONTINUED
  UPCOMING
}

enum BOOKING_STATUS {
  PENDING
  CONFIRMED
  CANCELLED
  DELIVERED
}
